ServerName localhost
ServerAdmin webmaster@localhost

<VirtualHost *:80>
  RewriteEngine On
  RewriteCond %{HTTPS} off
  RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R,L] 
</VirtualHost>

<VirtualHost *:443>
  DocumentRoot /var/www/html
 
  SSLEngine On
  SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem
  SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

  # Write logs to stdout
  LogLevel debug ssl:warn
  ErrorLog /proc/self/fd/1
  CustomLog /proc/self/fd/1 combined
 
  OIDCClientID ${OIDC_CLIENT_ID}
  OIDCProviderMetadataURL ${OIDC_METADATA_URI}
  OIDCOAuthVerifyJwksUri ${OIDC_JWKS_URI}
  OIDCRedirectURI ${OIDC_REDIRECT_URI}
  OIDCCryptoPassphrase ${CRYPTO_PASSPHRASE}
  OIDCClaimPrefix ${CLAIM_HEADER_PREFIX}
  OIDCOAuthSSLValidateServer ${VALIDATE_SSL}
  OIDCOAuthRemoteUserClaim ${REMOTE_USER_CLAIM} 
  OIDCAuthNHeader ${REMOTE_USER_HEADER}

  <Location "/">
    # CORS Allow ALL Origins
    Header always set Access-Control-Allow-Origin "*"

    # CORS Preflight
    <If "%{REQUEST_METHOD} == 'OPTIONS' && %{HTTP:Access-Control-Request-Headers} != '' && %{HTTP:Access-Control-Request-Method} != ''">
        LogMessage "CORS Preflight Request: Headers: %{req:Access-Control-Request-Headers} Methods: %{req:Access-Control-Request-Method}"
        
        Header always set Access-Control-Allow-Methods: "GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD"
        Header always set Access-Control-Allow-Headers: "Authorization"
        Header always set Access-Control-Max-Age "1000"

        RewriteEngine On

        # FIXME: Get rid of HTML error page returned in OPTIONS response
        RewriteRule ^(.*)$ $1 [R=200,L]    
    </If>
    <Else>
        AuthType oauth20
        AuthName "OpenID Connect (HMDA Ops)"

        # FIXME: Figure out if there is a way to set REMOTE_USER without a valid-user
        #        so we can allow passthrough when access_token is not present.
        Require valid-user

        LogMessage "REMOTE_USER: %{REMOTE_USER}" 
    </Else>

    # Default to echo API for testing
    ProxyPass http://echo:5000/
    ProxyPassReverse http://echo:5000/ 

  </Location>

  <Location "${API_PATH_PREFIX}">
    ProxyPass ${UPSTREAM_API_URI}
    ProxyPassReverse ${UPSTREAM_API_URI}
  </Location>

</VirtualHost>
